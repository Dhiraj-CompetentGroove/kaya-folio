<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Evan Tay Blog</title>
        <link>https://evantay.com/blog</link>
        <description>Evan Tay Blog</description>
        <lastBuildDate>Fri, 10 Sep 2021 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Why every Software Engineer should read Designing Data-Intensive Applications]]></title>
            <link>https://evantay.com/blog/why-you-should-read-ddia</link>
            <guid>why-you-should-read-ddia</guid>
            <pubDate>Fri, 10 Sep 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Picking up this book was one of the best decisions I made for my fledgling software engineering career. Its insights enabled me to make well-reasoned software design decisions, and confidently communicate them, in spite of my relative professional inexperience. Given how helpful it has been, I’m here today to share more about the impression it has left on me, and convince you that it is a must-read if you are a software engineer.]]></description>
            <content:encoded><![CDATA[<p>Picking up this book was one of the best decisions I made for my fledgling software engineering career. Its insights enabled me to make well-reasoned software design decisions, and confidently communicate them, in spite of my relative professional inexperience. Given how helpful it has been, I’m here today to share more about the impression it has left on me, and convince you that it is a must-read if you are a software engineer.</p><p><img src="/img/blog/ddia.png" alt="Designing Data-Intensive Applications"/></p><p>I kickstarted my engineering career back in January 2021, as a full stack engineer at <a href="https://padlet.com/">Padlet</a>. During the onboarding process, my (amazing) mentor, Brian, imparted a great deal of guidance to me. One of his tips was that I should take a look at Kleppman’s <a href="https://dataintensive.net/">Designing Data-Intensive Applications</a>. Thankfully, we had two copies of the book in the office, purchased by my (also amazing) boss, Shu Yang, who recommended me to read it too. I’m thankful I ended up taking their advice, because I was able to glean so much insights from Kleppman, which happened to be highly applicable to the infrastructure and full stack projects I was developing.</p><blockquote><p>&quot;This book should be required reading for software engineers.&quot; - Kevin Scott, Chief Technology Officer at Microsoft</p></blockquote><p>Like Brian, Shu Yang and Kevin, I now also believe all software engineers working on a distributed, cloud or data-intensive system will greatly benefit from reading the book. It provides the fundamental framework for thinking about these systems, and also the vocabulary to communicate such thoughts. Coupled together, these insights will empower you to make better design decisions and effectively convey them, even if you lack prior experience in the problem domain.</p><p>Kleppman also compared the key fundamental ideas behind the broad range of popular data systems out there today, by discussing their advantages, limitations and trade-offs, rather than diving deep into the intricacies of each tool. This was ideal given that the book&#x27;s objective was to help us choose the right tool for the right occasion, which these characteristics will be more relevant for.</p><p>If you lack the time (or will) to pour over the entire book, you should at least check out the opening chapter. In it, Kleppman gives a comprehensive yet succinct overview of what I mentioned above, and provides a clear, detailed explanation of the three key principles in designing data-intensive system architecture: Reliability, Scalability and Maintainability. Just reading this first chapter alone was beneficial to me, as I was now able to better understand and discuss architectural concerns with my team.</p><p>If you&#x27;re still not convinced whether to invest your time into this book, you can check out a <a href="/docs/reliable-scalable-maintainable">summary I&#x27;ve written for the first chapter</a>, where I’ve condensed Kleppman’s opening discourse on Reliability, Scalability and Maintainability. I’m certain it’ll provide a glimpse into the many lessons that <a href="https://dataintensive.net/">Designing Data-Intensive Applications</a> has to share, and if you do read the book, definitely let me know what you think!</p><p><em>Special thanks to <a href="https://www.linkedin.com/in/thebestvanessatay">Vanessa Tay</a> for editing this!</em></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Integrating PostHog product analytics with Docusaurus v2 on GitHub Pages]]></title>
            <link>https://evantay.com/blog/docusaurus-posthog</link>
            <guid>docusaurus-posthog</guid>
            <pubDate>Sat, 26 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[I integrated PostHog analytics into this website today. I decided to do so after reading Gergely Orosz's Stats page on his blog The Pragmatic Engineer. He had installed Plausible analytics and made his analytics dashboard public. I thought that was cool and wanted to do the same.]]></description>
            <content:encoded><![CDATA[<p>I integrated <a href="https://posthog.com/">PostHog</a> analytics into this website today. I decided to do so after reading Gergely Orosz&#x27;s <a href="https://blog.pragmaticengineer.com/stats/">Stats</a> page on his blog <a href="https://blog.pragmaticengineer.com/">The Pragmatic Engineer</a>. He had installed <a href="https://plausible.io/">Plausible</a> analytics and made his <a href="https://plausible.io/blog.pragmaticengineer.com?period=6mo">analytics dashboard</a> public. I thought that was cool and wanted to do the same.</p><p>I managed to find a <a href="https://github.com/infracost/docusaurus-plugin-plausible">Plausible plugin</a> for <a href="https://docusaurus.io/">Docusaurus v2</a>, which is what this website runs on. But I decided to use <a href="https://posthog.com/">PostHog</a> instead. It also has a <a href="https://github.com/PostHog/posthog-docusaurus">Docusaurus plugin</a> and a public dashboard feature. I decided so because it is free and Plausible isn&#x27;t.</p><p>Plausible only offers a free 30-day trial, and would cost at least $6 monthly subsequently. In comparison, PostHog has a free non-expiring tier which provides up to 1 million events every month. It also requires no credit card and is completely self-serve. There was no need to request and wait for a free license. It took me less than 10 minutes from signing up to getting the analytics running.</p><p>:::info PostHog is open-source</p><p>If you are looking for an open-source solution you can self-host, PostHog may be it.</p><p>:::</p><p>Despite what I have shared so far, I would still choose Plausible over PostHog if the former was free too. That&#x27;s because the Plausible&#x27;s dashboard interface looks much better and has more visualization options. For comparison, you can view the <a href="https://app.posthog.com/shared_dashboard/OpHsSFokK2VvhHFF-5Jn0rgVzqaMRg">PostHog dashboard</a> for this site, and the <a href="https://plausible.io/blog.pragmaticengineer.com?period=6mo">Plausible dashboard</a> for <a href="https://blog.pragmaticengineer.com/">The Pragmatic Engineer</a>.</p><p>If you want to integrate PostHog with your Docusaurus site, you can follow the guide below. The later steps are for deployment to GitHub Pages via GitHub Actions. But you can easily modify them for other platforms and deployment workflows. I will give some tips for doing that.</p><h2>Installation Guide</h2><ol><li><p>Sign up for <strong>PostHog Cloud</strong> on <a href="https://posthog.com/">posthog.com</a>.</p></li><li><p>Get your <strong>Project API Key</strong> from <a href="https://app.posthog.com/project/settings">Project Settings</a>.
<img src="/img/blog/posthog_api_key.png" alt="PostHog Project API Key"/></p></li><li><p>Install the <code>posthog-docusaurus</code> package by running this command at your Docusaurus project root:</p><pre><code class="language-zsh">yarn add posthog-docusaurus
</code></pre><p>or</p><pre><code class="language-zsh">npm install --save posthog-docusaurus
</code></pre></li><li><p>Add this code block to <code>docusaurus.config.js</code>:</p><pre><code class="language-js">module.exports = {
  plugins: [&quot;posthog-docusaurus&quot;],
  themeConfig: {
    posthog: {
      apiKey: process.env.POSTHOG_API_KEY || &quot;DEV&quot;,
      appUrl: &quot;https://app.posthog.com&quot;, // optional
      enableInDevelopment: false, // optional
    },
  },
};
</code></pre><p>:::note</p><p>The example in the official PostHog guide for <a href="https://posthog.com/docs/libraries/docusaurus">Docusaurus v2 Integration</a> inserts the API key directly into the code (e.g. <code>apiKey: &quot;phc_fakekeyhHBZOuIq&quot;</code>). It is a bad idea to do so, especially if you host your code publicly (i.e. on a GitHub public repo). It is good practice to keep API keys secret and outside of application code instead. We will be using <a href="https://docs.github.com/en/actions/reference/encrypted-secrets">GitHub Encrypted Secrets</a> to achieve that.</p><p>:::</p></li><li><p>Add a <strong>repository secret</strong> to the GitHub repo hosting your site&#x27;s code.
<img src="/img/blog/posthog_actions_secrets.png" alt="GitHub Action Secrets"/></p><p><strong>Settings</strong> &gt; <strong>Secrets</strong> &gt; <strong>New repository secret</strong> &gt; <strong>Name:</strong> <code>POSTHOG_API_KEY</code></p><p>:::tip If you are using another deployment platform</p><p>There should be a settings panel which allows you to specify environment variables or secrets to insert into your application deployments securely. Put your <code>POSTHOG_API_KEY</code> there. Skip the next step.</p><p>:::</p></li><li><p>Open the GitHub Action workflow file responsible for deploying your site, and add the environment variable <code>POSTHOG_API_KEY</code> to the Docusaurus build step:</p><pre><code class="language-yml">env:
  POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
</code></pre><p>Example:</p><pre><code class="language-yml"># Install and build Docusaurus website
- name: Build Docusaurus website
  run: |
    cd website
    npm install 
    npm run build
  env:
    POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
</code></pre></li></ol><p>That&#x27;s it! Once you deploy your new changes, the plugin will automatically start tracking pageviews, clicks and more. For more customisation options, you can check out the <a href="https://github.com/PostHog/posthog-docusaurus">posthog-docusaurus</a> plugin repo and the PostHog guide for <a href="https://posthog.com/docs/libraries/docusaurus">Docusaurus v2 Integration</a>. You can also check out the <a href="https://github.com/DigiPie/kaya-folio/commit/fd6b029dbc0be34909cd539f2d33bac5de8209bc">commit</a> I made to integrate PostHog into this website.</p><p>If you want to deploy Docusaurus to GitHub Pages, check out my post on <a href="2021-01-17-docusaurus-gh-action.md">GitHub Action for Docusaurus</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Top 3 reasons why you should start investing with StashAway today!]]></title>
            <link>https://evantay.com/blog/stashaway</link>
            <guid>stashaway</guid>
            <pubDate>Thu, 11 Mar 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Disclaimer: This post is not sponsored, and does not constitute financial advice of any form (I bet you know better than me). Read at your own discretion!]]></description>
            <content:encoded><![CDATA[<p><em>Disclaimer: This post is not sponsored, and does not constitute financial advice of any form (I bet you know better than me). Read at your own discretion!</em></p><p>Signing up on <a href="https://www.stashaway.sg/referrals/tayegd">StashAway</a> (a <a href="https://blog.moneysmart.sg/invest/robo-advisors-singapore/#what-are-robo-advisors">robo-advisor platform</a>) back in the early 2020s was the first step in taking control of my financial health. Before that, 100% of my cash was just sitting in a POSB Savings account, growing at an incredibly pointless rate of <a href="https://www.dbs.com.sg/personal/rates-online/deposit-rates.page">0.05% per annum</a>. I might as well have kept the money under my mattress.</p><h2>Backstory</h2><p>I was hesitant to invest for years because I used to think any form of investment was risky. Like <del>most</del> some Singaporeans, I <del>am</del> was <a href="http://www.singlishdictionary.com/"><em>kiasi</em></a>. I was afraid of the unknown. What eventually changed my mind was chancing upon this article: <a href="https://thewokesalaryman.com/2020/10/16/the-big-problem-playing-it-too-safe-with-money-in-our-20s/"><em>The big problem (of) playing it too safe with money in our 20s</em></a> by <em>thewokesalaryman</em>, and the following quote:</p><p>:::tip Quote of the Day</p><p>Ironically, by not taking any risks and letting all your money get eroded by certain inflation, you are actually doing the riskiest thing.</p><p>:::</p><p>This quote was the wake-up call for me to start investing, and could be yours too if you are someone who is privileged enough to start doing the same (i.e. you have the financial ability to buy bubble tea at least once a week).</p><p><img src="/img/blog/bubbletea.jpg" alt="Milksha&#x27;s Bubble Tea"/></p><p><em>Photo by my bubble-tea buddy Elsie Lee</em><br/>
<strong>Pictured (from left):</strong> Milksha&#x27;s Fresh Milk, and Izumo Matcha Milk with Honey Pearls<br/>
<strong>Is Milksha a buy?</strong> Milksha isn&#x27;t cheap by any stretch but you can&#x27;t put a price tag on happiness :star:</p><p>:::tip Pro Tip from fellow bubble-tea enthusiast Freda</p><p>Buy Milksha coupons from Shopee beforehand to get massive discounts!</p><p>:::</p><p>Anyhow, I reasoned the best way to kick-start my investment journey would be with a robo-advisor platform, given how beginner-friendly it is, how low the commission fees are, and <del>how lazy I am</del> given the passive and minimal-effort investment a robo-advisor offers.</p><p>You can check out this <a href="https://dollarsandsense.sg/robo-advisors-in-singapore-what-you-need-to-know-before-investing/">page</a> by <em>dollarsandsense</em> giving an introduction to robo-advisors for more reasons why you should or should not invest with a robo-advisor platform.</p><p>I ended up choosing StashAway as my platform of choice, and here are the top 3 reasons why!</p><h2>1. StashAway&#x27;s all-star C-suite</h2><p>StashAway is led by an &quot;Expert Investment Team&quot; (their words not mine) made up of the following co-founders:</p><ul><li>Chief Executive Officer Michele Ferrario, a former CEO of <a href="https://www.zalora.sg/about/">Zalora Group</a> and the co-founder of <a href="https://www.rocket-internet.com/">Rocket Internet</a></li><li>Chief Investment Officer Freddy Lim, a former Managing Director and Global Head of Derivatives Strategy at <a href="https://www.nomura.com/">Nomura</a></li><li>Chief Technology Officer Nino Ulsamer, the co-founder and former CTO of a now-defunct (oops) software solution company for e-commerce analytics</li></ul><p>These guys have real, solid credentials. They are far more experienced in investing than an amateur like me (surprise surprise), and this assured me that my investments in StashAway would be handled by well-informed and secure hands.</p><p>Credentials aside, they also have a proven track record of high returns for most of their portfolios. Despite how volatile and uncertain 2020 was, I achieved an <strong>impressive 19.59% <a href="https://www.investopedia.com/terms/t/time-weightedror.asp">time-weighted return</a></strong> for my portfolio of <a href="https://www.stashaway.sg/r/what-is-the-stashaway-risk-index">StashAway Risk Index</a> 22%, between 3rd of February 2020, and 10th of March, 2021.</p><p><img src="/img/blog/stashaway_returns.png" alt="Evan&#x27;s StashAway returns"/></p><p>To find out how well StashAway&#x27;s portfolios performed at other risk-levels, check out their article: <a href="https://www.stashaway.my/r/our-returns-2020"><em>Our Returns in 2020</em></a>.</p><h2>2. No minimum amount at all</h2><p>Another robo-advisor platform I was considering at the time was <a href="https://endowus.com/">EndowUs</a>. However, I ultimately went with StashAway because while EndowUs had a minimum investment amount of $10,000.00 (added cents for emphasis), <strong>StashAway had no minimum amount at all</strong>. This is still the case as of 11 March 2021.</p><p>As someone new to investing, the decision to invest $10,000 all at once was too intimidating for me to make. More importantly, I was still a student back then, one who did not have that many digits in his bank account. Therefore, StashAway was a natural choice for its low entry barrier!</p><h2>3. My money is safe</h2><p>Naturally, I was concerned about how safe using StashAway would be. More specifically, I was worried about losing my initial investment of $100 in StashAway, in the event of StashAway filing for bankruptcy. As it turned out, it was an unfound concern given that:</p><p>:::note Quote</p><p>Your money is kept entirely separate from StashAway&#x27;s finances. To ensure that we never touch your money, we use custodian banks that hold your money, whether it&#x27;s in cash or in securities.</p><p>In these custodian institutions, your assets are always in a segregated account-- one that is separate from StashAway&#x27;s operations and assets. This means that you will always have full access and claim to your assets no matter what happens to StashAway.</p><p>:::</p><p>You can read more about StashAway&#x27;s Frequently Asked Questions <a href="https://www.stashaway.sg/faq/115003747047-what-happens-to-my-money-if-stashaway-gets-acquired-goes-public-or-closes">here</a>. Do your own research <em>hor</em>!</p><h2>Closing note</h2><p>I hope you found this post/rambling/<em>thing</em> (<!-- -->*<!-- -->gestures wildly at everything) insightful in any way. If you are still interested in StashAway, but not entirely convinced by me (I’ll try not to take it personally), you can check out this <a href="https://www.youtube.com/watch?v=0IvyrANMz78">video</a> by <em>Kevin Learns Investing</em>. All the best with getting financially fit!</p><h2><a href="https://www.singlish.net/lobang/">Lobang</a></h2><p><strong>StashAway Referral Link:</strong> <a href="https://www.stashaway.sg/referrals/tayegd">https://www.stashaway.sg/referrals/tayegd</a><br/>
<!-- -->Both of us will get up to $10,000 SGD managed for free for 6 months!</p><p><em>Special thanks to Vanessa Tay for editing this!</em></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[GitHub Action for Docusaurus]]></title>
            <link>https://evantay.com/blog/docusaurus-gh-action</link>
            <guid>docusaurus-gh-action</guid>
            <pubDate>Sun, 17 Jan 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[I got tired of deploying my Docusaurus website to GitHub Pages manually, and decided to do something about it using GitHub Action.]]></description>
            <content:encoded><![CDATA[<p>I got tired of deploying my Docusaurus website to GitHub Pages manually, and decided to do something about it using GitHub Action.</p><p>Initially, I was planning to follow the <a href="https://v2.docusaurus.io/docs/deployment#triggering-deployment-with-github-actions">official guide</a> on doing so. However, it was actually much more complicated than I liked. I did not really want to generate and store a SSH key on GitHub. Too much effort man.</p><p>I decided it was better off for me to write my own script. Here it is:</p><h2>deploy-docusaurus.yml</h2><p>:::caution</p><p>The script   below assumes that your Docusaurus website resides at <code>/website</code> of your repo. If that is not the case for you, you will need to:</p><ul><li>Change <code>cd website</code> to <code>cd &lt;docu_site_root&gt;</code>, or delete the entire line if your Docusaurus website is at the root of your repo <code>/</code></li><li>Change <code>build_dir</code>&#x27;s value from <code>website/build</code> to <code>&lt;docu_site_root&gt;/build</code>, or <code>build</code> if your Docusaurus website is at the root of your repo <code>/</code></li></ul><p>:::</p><pre><code class="language-yml">name: deploy-docusaurus

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repo
        uses: actions/checkout@v2
      # Node is required for npm
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: &quot;12&quot;
      # Install and build Docusaurus website
      - name: Build Docusaurus website
        run: |
          cd website
          npm install 
          npm run build
      - name: Deploy to GitHub Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: gh-pages
          build_dir: website/build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</code></pre><p>:::note</p><p>GitHub will automatically add <code>GITHUB_TOKEN</code> to Secrets. You need not do so. See <a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow">this</a> for more information.</p><p>:::</p><p>To see this script in action, visit my <a href="https://github.com/DigiPie/kaya-folio/actions">personal website repo</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[History of EvanTay.com]]></title>
            <link>https://evantay.com/blog/history</link>
            <guid>history</guid>
            <pubDate>Mon, 21 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[_Established in 2013_]]></description>
            <content:encoded><![CDATA[<p><strong><em>Established in 2013</em></strong></p><p>I first bought my personal domain <a href="https://www.evantay.com">www.evantay.com</a> way back in 2013. Younger me thought it would be cool and fun to run my own website, and it still is. :sunglasses:</p><p>To be honest, I can&#x27;t even remember what my very first website looked like, but I am quite sure it was built using vanilla HTML and CSS, something unthinkable in this day and age.</p><p><strong><em>Move to Grav CMS in 2017</em></strong></p><p>Given that I was building everything from the ground up, maintainability became problematic. In 2017, older younger me decided it wasn&#x27;t worth the effort to do it myself, and I started shopping for a framework to adopt. I eventually settled on using <a href="https://getgrav.org/">Grav</a>, a flat-file Content Management System (CMS) powered by PHP. I chose it because I was familiar and interested in PHP at the time.</p><p>To get started on building my second site quickly, I used a one-page Grav theme <a href="https://github.com/getgrav/grav-theme-ceevee">Ceevee</a>.</p><p><img src="/img/blog/ceevee.png" alt="Ceevee"/></p><p>However, I still wanted to add my personal touch to my portfolio website. This led me to heavily modifying the theme numerous times over the years, from 2017 up until 2020. It was a really fun journey while it lasted.</p><p><img src="/img/blog/evantay_v1.png" alt="EvanTay.com v1 site"/></p><p><strong><em>Move to Cloud in 2017</em></strong></p><p>About the same time, I also moved from using a website host to <a href="https://digitalocean.com">DigitalOcean</a>. I hosted my website on the cheapest droplet (VM) I could find (the 5 bucks one). I ran CentOS on the VM, and used an <a href="https://www.nginx.com/">Nginx</a> web server to serve the Grav website. Pretty old-school right?</p><p><strong><em>Start of DigiDocs in 2019</em></strong></p><p>Last year, during January 2019, I also started working on a separate pet project called <a href="https://digipie.github.io/digidocs/">DigiDocs</a>, my personal documentation website. I was motivated to do so because I wanted to consolidate useful knowledge gained from attending university classes, and my own self-directed learning. I kept the site updated up until October 2020.</p><p>Back then, <a href="https://digipie.github.io/digidocs/">DigiDocs</a> lived at <a href="https://www.evantay.com/docs/">www.evantay.com/docs</a>, and was served by the same Nginx server which served my main portfolio website.</p><p><strong><em>Move to Docusaurus v2 in 2020</em></strong></p><p>More recently, in October 2020, I decided to replace both documentation and portfolio site with a single <a href="https://v2.docusaurus.io/">Docusaurus v2</a> website (which you&#x27;re looking at right now).</p><p>I did so because I wanted to:</p><ol><li><strong>Keep up with the latest technologies</strong>: I wanted to learn more about <a href="https://v2.docusaurus.io/">Docusaurus v2</a> and also <a href="https://reactjs.org/">ReactJS</a>, which is what Docusaurus is built upon. It was about time to move on from PHP.</li><li><strong>Reduce operating costs by moving from a dynamic to static website</strong> :money_with_wings: : Given that all of my content are static, it did not make sense that I was using a dynamic PHP site generator such as <a href="https://getgrav.org/">Grav</a>. By moving to a static website, I will be able to host my site at a cheaper cost or even for free! I am planning to achieve the latter by using <a href="https://pages.github.com/">GitHub pages</a>.</li></ol><p>So far, the experience of using <a href="https://v2.docusaurus.io/">Docusaurus v2</a> has been great! I am glad I started on this migration journey, despite feeling sentimental about my old portfolio and documentation websites.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[STACK 2020 Developers Conference]]></title>
            <link>https://evantay.com/blog/stack-2020</link>
            <guid>stack-2020</guid>
            <pubDate>Thu, 03 Dec 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[STACK 2020 Developers Conference is GovTech’s flagship conference and the largest government-led developers event in Singapore that connects government, industry and the tech community.]]></description>
            <content:encoded><![CDATA[<p><a href="https://www.stack.gov.sg/">STACK 2020 Developers Conference</a> is GovTech’s flagship conference and the largest government-led developers event in Singapore that connects government, industry and the tech community.</p><p>In this post, you will find my key takeaways for some of the sessions I attended during the conference. I chose to attend these sessions based on my interests in Cloud and Microservices.</p><p><strong>Day 1:</strong></p><ul><li><strong><a href="#opening-note">Opening note</a></strong> by Dr. Vivian Balakrishnan: Minister-in-charge of Smart Nation Programme Office and Chan Cheow Hoe: Government Chief Digital Technology Officer</li><li><strong><a href="#rethink-reinvent-rebuild">Rethink, Reinvent, Rebuild</a></strong> by Jeff Barr: Vice President &amp; Chief Evangelist at Amazon Web Services</li><li><strong><a href="#seeding-the-cloud-engineering-solutions-for-cloud-adoption">Seeding the Cloud: Engineering Solutions for Cloud Adoption</a></strong> by Hunter Nield: Distinguished Engineer at GovTech</li><li><strong><a href="#six-principles-for-refactoring-a-monolith-to-microservices">Six Principles for Refactoring a Monolith to Microservices</a></strong> by Chris Richardson: Architect at Eventuate, Inc</li></ul><p><strong>Day 2:</strong></p><ul><li><strong><a href="#you-wont-believe-this-hack-to-improve-your-technical-communication">You Won’t BELIEVE This HACK to Improve Your Technical Communication!</a></strong> by Nikhil Choudhary: Software Engineer at Open Government Products</li><li><strong><a href="#devops-cloud-and-back-again">DevOps: Cloud and Back Again</a></strong> by Mitchell Hashimoto: Co-Founder and CTO at HashiCorp</li></ul><h2>Opening note</h2><p><strong>Speaker(s)</strong></p><ul><li><a href="http://vivian.balakrishnan.sg/">Dr. Vivian Balakrishnan</a>: Minister-in-charge of Smart Nation Programme Office</li><li><a href="https://www.linkedin.com/in/cheow-hoe-chan-92646215/">Chan Cheow Hoe</a>: Government Chief Digital Technology Officer</li></ul><p><strong>Key takeaways</strong></p><p>The government believes openness is the way to building a smart nation.</p><p>On that note, they believe in:</p><ul><li>Adopting the best solutions there are, including those from the industry, instead of doing everything in-house<ul><li><a href="https://www.developer.tech.gov.sg/technologies/infrastructure-and-hosting/government-commercial-cloud">Government Commercial Cloud</a>: AWS, Azure, GCP</li></ul></li><li>Collaborating with industry developers via open-source<ul><li><a href="https://www.developer.tech.gov.sg/">Singapore Government Developer Portal</a>: Collaboration platform for government and industry developers</li></ul></li><li>Providing transparency to citizens and industry professionals<ul><li><a href="https://www.tracetogether.gov.sg/">TraceTogether</a>: Transparent and open collaboration with the industry</li></ul></li></ul><h2>Rethink, Reinvent, Rebuild</h2><p><strong>Speaker(s)</strong></p><ul><li><a href="https://www.linkedin.com/in/jeffbarr/">Jeff Barr</a>: Vice President &amp; Chief Evangelist at Amazon Web Services</li></ul><p><strong>Key takeaways</strong></p><ul><li><strong>Rethink</strong> - Take a good look at where we are<ul><li>Everything has changed due to COVID-19, Quarantine, WFH</li><li>No firm ground and constants are now variables</li><li>People are more receptive to change and invention right now</li><li>Good time for innovation and progress</li></ul></li><li><strong>Reinvent</strong> - Solve challenges in a new way<ul><li>Dream big dreams, address these challenges, change the world</li><li>Share what you learn to reinforce what you learned<ul><li>Content creation / video streaming possibilities</li></ul></li></ul></li><li><strong>Rebuild</strong> - Put what you have learned to work<ul><li>Take what you learn, do something awesome, and remember to share it!</li></ul></li></ul><h2>Seeding the Cloud: Engineering Solutions for Cloud Adoption</h2><p><strong>Speaker(s)</strong></p><ul><li><a href="https://www.linkedin.com/in/hunter/?originalSubdomain=sg">Hunter Nield</a>: Distinguished Engineer at GovTech</li></ul><p><strong>Key takeaways</strong></p><p>Hunter shared about how GovTech uses Infrastructure-as-Code (IaC) and Policy-as-Code (PaC) to accelerate cloud operations. Read <a href="#devops-cloud-and-back-again">#devops-cloud-and-back-again</a> by Hashicorp CTO Mitchell for more information.</p><ul><li><strong>Establishing a Landing Zone</strong><ul><li>A repeatable configuration across multiple Cloud Service Providers (CSP)</li><li>The foundation of any cloud environment at scale</li><li>Serves as a consistent platform for governance, onboarding, networking and security</li></ul></li><li><strong>Accelerating deployment with Infrastructure-as-Code (IaC)</strong><ul><li>Code and configuration to provision cloud resources and Landing Zones</li><li>Develop common templates for consistency and familiarity</li><li>Get feedback on pain points faced by &quot;customers&quot; while using said templates</li></ul></li><li><strong>Consistent audit and reporting with Policy-as-Code (PaC)</strong><ul><li>Code and configuration to test and validate cloud infrastructure deployed by IaC</li><li>Reduce need for manual audits and speed up auditing process</li></ul></li></ul><h2>Six Principles for Refactoring a Monolith to Microservices</h2><p><strong>Speaker(s)</strong></p><ul><li><a href="https://eventuate.io/about.html">Chris Richardson</a>: Architect at Eventuate, Inc</li></ul><p><strong>Key takeaways</strong></p><p>:::note Quote</p><p>&quot;A Microservice application is structured as a set of loosely coupled services that can be independently deployed.&quot; - Chris Richardson</p><p>:::</p><p>Chris shared 6 principles to follow when moving from a Monolith to a Microservice architecture.</p><p>Here are 5 of them :wink: :</p><ul><li>Adopt Microservice architecture for the right reasons<ul><li>Monolith architecture is not necessary bad (an anti-pattern), it has its valid use-cases</li><li>Adopt Microservice architecture because it allows you to deliver software rapidly, frequently and sustainability, with small, autonomous teams working on the different microservices</li></ul></li><li>Migrate to Microservice architecture incrementally rather than via Big Bang rewrite<ul><li><strong>Strangler Application</strong>: Incrementally migrate functionality from existing Monolith application to new Strangler Microservice application<ul><li>Extract existing code modules and database tables out into microservices</li><li>Implement new features as microservices</li></ul></li></ul></li><li>Consider Return-on-Investment when deciding which modules to convert into microservices<ul><li>Consider benefit of decoupling said module</li><li>Consider cost of decoupling<ul><li>How difficult it is to do so</li><li>How many inbound dependencies it has<ul><li>If module A is depended upon by module B, consider extracting module B first</li></ul></li></ul></li></ul></li><li>Define the service boundaries correctly<ul><li>Avoid <strong>Runtime Coupling</strong><ul><li>Reduced availability due to reliance of a given microservice on another for serving a given request<ul><li>For example, microservice A receives an API request which it can only respond to when its own API request to microservice B is answered first</li></ul></li><li>Make microservices as self-contained as possible<ul><li>Able to respond to a request without making follow-up requests to other microservices</li></ul></li></ul></li><li>Avoid <strong>Design-Time Coupling</strong><ul><li>Similar to <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle">Open-Closed Principle</a></li><li>Avoid having to modify other microservices when modifying a given microservice</li><li>Must be able to modify or exend a given microservice independently as much as possible<ul><li>Have small and stable API which hides as much implementation complexity as possible</li><li>Hide what you can, not only code but also database schemas, so you can change them without affecting other microservices</li></ul></li></ul></li></ul></li><li>Measuring success<ul><li>Improved metrics: Reduced lead time, deployment frequency, failure rate, etc.</li><li>Improvements in other &#x27;-ilities&#x27;: Availability, Reliability and Scalability </li></ul></li></ul><h2>You Won’t BELIEVE This HACK to Improve Your Technical Communication!</h2><p><strong>Speaker(s)</strong></p><ul><li><a href="https://www.linkedin.com/in/nikhil-c-513647148/">Nikhil Choudhary</a>: Software Engineer at Open Government Products</li></ul><p><strong>Key takeaways</strong></p><p>When introducing non-technical folks to coding, keep in mind that the most important objective is to convey understanding of core programming concepts.</p><p>On that note, here are some tips Nikhil shared:</p><ul><li>Forgo coding best practices if doing so make it easier for the audience to understand<ul><li>Reduce surface area to increase accessibility, even if it is not good coding practice<ul><li>Collapse all HTML, JS and CSS into a single file so students can view everything in one place</li><li>Collapse all functions into one for the same reason as the previous line</li><li>Combine program lines if it makes things clearer</li></ul></li></ul></li><li>Use real-world examples to explain technical concepts<ul><li>For example, use a restaurant scenario to explain <code>async</code></li></ul></li><li>Enable students in sharing their joy/achievement<ul><li>Make deploying their application easy<ul><li>Can use <a href="https://app.netlify.com/drop">Netlify Drop</a>: Simply drag and drop your HTML, JS, CSS files and Netlify Drop will do the rest for deployments</li></ul></li></ul></li><li>Practise empathy consciously throughout teaching process to identify ways you can make learning easier for your students</li></ul><h2>DevOps: Cloud and Back Again</h2><p><strong>Speaker(s)</strong></p><ul><li><a href="https://www.linkedin.com/in/mitchellh/">Mitchell Hashimoto</a>: Co-Founder and CTO at HashiCorp</li></ul><p><strong>Key takeaways</strong></p><p>Mitchell shared more about the <a href="https://www.hashicorp.com/cloud-operating-model">Cloud Operating Model</a> during this session.</p><p>:::note <a href="https://www.hashicorp.com/cloud-operating-model">Cite</a></p><p>&quot;The Cloud Operating Model is a new approach for IT operations that organizations need to use to be successful with cloud adoption and thrive in an era of multi-cloud architecture.&quot; - Hashicorp</p><p>:::</p><table><thead><tr><th></th><th>Static</th><th>Dynamic</th></tr></thead><tbody><tr><td>Run</td><td>Dedicated infrastructure to run app on</td><td>Scheduled automatically across a fleet (e.g. AWS Auto-Scaling Group, Hashicorp Nomad)</td></tr><tr><td>Connect</td><td>Host-based, static IP-addressing</td><td>Service-based, dynamic IP addresses due to dynamic provisioning</td></tr><tr><td>Secure</td><td>High-trust environment which is IP-address-based, with clear network perimeter</td><td>Low-trust environment with no clear perimeter given multi-tenancy and nature of the Cloud</td></tr><tr><td>Provision</td><td>Dedicated resources - Physical servers, routers and switches</td><td>Capacity on-demand, provision VMs, Containers and other managed services, or simply use Serverless services</td></tr></tbody></table><ul><li>Infrastructure operations on the Cloud must follow the Dynamic Cloud Operating Model fully<ul><li>Pointless if you provision infrastructure in minutes using Infrastructure-as-Code (IaC), but still manually handle connectivity and security review using tickets</li><li>Have to adopt dynamic cloud operating tools for all 4 layers</li></ul></li><li>Why use IaC for provisioning<ul><li>Split Execution from Definition</li><li>Execution can be automated and carried out via API, UI or automatically through Continuous-Integration (CI) tools</li></ul></li><li>How can teams use IaC<ul><li>Operations team still necessary, focus on creating and improving blueprints and handling edge-cases when doing so</li><li>Development team creates infrastructure in a self-service manner, using the blueprints created by the Operations team
separating buzz words from crucial tech</li></ul></li></ul><p>Read up on Hashicorp&#x27;s white paper on <a href="https://www.hashicorp.com/cloud-operating-model">Cloud Operating Model</a> for more information.</p>]]></content:encoded>
        </item>
    </channel>
</rss>